# üöÄ CONFIGURACI√ìN NGINX - CORNER BOOKS LIBRARY SYSTEM
# =================================================================

# üìã 1. CONFIGURACI√ìN PRINCIPAL
# Usuario que ejecuta nginx (seguridad - sin privilegios)
user nobody;

# Procesos autom√°ticos basados en CPU (8 cores = 8 workers)
# Resultado: 8 workers √ó 1024 conexiones = 8,192 usuarios simult√°neos
worker_processes auto;

# Archivo donde se guardan todos los errores para debugging
error_log /opt/homebrew/var/log/nginx/error.log;

# Archivo que contiene el ID del proceso principal de nginx
pid /opt/homebrew/var/run/nginx.pid;

# ‚ö° 2. BLOQUE EVENTS - Configuraci√≥n de conexiones
events {
    # Cada worker puede manejar 1024 conexiones simult√°neas
    # Total: 8 workers √ó 1024 = 8,192 conexiones simult√°neas
    worker_connections 1024;
}

# üåê 3. BLOQUE HTTP - Configuraci√≥n principal del servidor web
http {
    # Incluye tipos MIME (jpg, css, js, html, etc.)
    include       mime.types;
    
    # Tipo por defecto si nginx no reconoce el archivo
    default_type  application/octet-stream;
    
    # üìä LOGS - Registro de todas las requests
    # Log de accesos: GET, POST, status codes, IPs, etc.
    access_log /opt/homebrew/var/log/nginx/access.log;
    
    # üöÄ OPTIMIZACIONES DE PERFORMANCE
    # Env√≠a archivos directamente desde kernel (ultra r√°pido)
    sendfile on;
    
    # Agrupa datos antes de enviar (optimizaci√≥n de red)
    tcp_nopush on;
    
    # Env√≠a datos inmediatamente cuando est√°n listos
    tcp_nodelay on;
    
    # Mantiene conexiones abiertas 65 segundos (reutilizaci√≥n)
    keepalive_timeout 65;
    
    # Tama√±o de tabla hash para tipos MIME
    types_hash_max_size 2048;

    # üóúÔ∏è COMPRESI√ìN GZIP - Reduce tama√±o de archivos 70%
    # Activa compresi√≥n autom√°tica
    gzip on;
    
    # A√±ade header "Vary: Accept-Encoding" para proxies
    gzip_vary on;
    
    # Solo comprime archivos mayores a 1KB (eficiencia)
    gzip_min_length 1024;
    
    # Tipos de archivo que se comprimen (texto, JavaScript, JSON, etc.)
    gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;

    # üè¢ SERVIDOR PRINCIPAL - Configuraci√≥n del host virtual
    server {
        # Escucha en puerto 80 (HTTP est√°ndar - no necesita escribirse en URL)
        listen 80;
        
        # Responde solo a requests de "localhost"
        server_name localhost;

        # üîó LOCATION /API/ - Proxy para Backend Node.js
        # Cualquier URL que empiece con /api/ se env√≠a al backend
        # Ejemplo: localhost:80/api/books ‚Üí localhost:5000/api/books
        location /api/ {
            # Env√≠a todas las requests de API al backend Node.js
            proxy_pass http://localhost:5000;
            
            # Usa HTTP/1.1 (compatible con features modernas)
            proxy_http_version 1.1;
            
            # Headers para WebSockets (upgrade de HTTP ‚Üí WebSocket)
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            
            # Mantiene el host original (localhost:80)
            proxy_set_header Host $host;
            
            # IP real del usuario (para logs y analytics)
            proxy_set_header X-Real-IP $remote_addr;
            
            # Cadena de proxies (si hay varios intermediarios)
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            
            # Protocolo original (HTTP o HTTPS)
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # No hacer cache de WebSockets
            proxy_cache_bypass $http_upgrade;
        }

        # ‚ö° CONFIGURACI√ìN ESPECIAL PARA VITE - Hot Module Replacement
        # Archivos especiales de Vite para desarrollo
        # Ejemplo: localhost:80/@vite/client ‚Üí localhost:5173/@vite/client
        location /@vite/ {
            # Env√≠a a Vite dev server
            proxy_pass http://localhost:5173;
            proxy_http_version 1.1;
            
            # Headers para WebSocket (Hot Module Replacement)
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            
            # No cache para desarrollo
            proxy_cache_bypass $http_upgrade;
        }

        # üìÅ ASSETS DE DESARROLLO - C√≥digo fuente de React
        # M√≥dulos fuente de tu aplicaci√≥n React
        # Ejemplo: localhost:80/src/components/Header.jsx ‚Üí localhost:5173/src/components/Header.jsx
        location /src/ {
            # Env√≠a a Vite para compilaci√≥n
            proxy_pass http://localhost:5173;
            proxy_http_version 1.1;
            
            # Headers para hot reload
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            
            # No cache para desarrollo
            proxy_cache_bypass $http_upgrade;
        }

        # üñºÔ∏è ARCHIVOS EST√ÅTICOS - JavaScript, CSS, im√°genes, fuentes
        # Expresi√≥n regular para archivos est√°ticos comunes
        # ~* = case-insensitive regex
        # \. = punto literal
        # $ = final de string
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2)$ {
            # Env√≠a a Vite (que los sirve optimizados)
            proxy_pass http://localhost:5173;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            
            # üéØ CACHE AGRESIVO - Archivos est√°ticos no cambian
            # Browser guarda archivo por 1 a√±o
            expires 1y;
            
            # Header que indica "nunca cambia, cache forever"
            add_header Cache-Control "public, immutable";
        }

        # üîå WEBSOCKETS - Para Hot Module Replacement de Vite
        # Comunicaci√≥n en tiempo real entre browser y Vite
        # Para que cambios en c√≥digo se vean instant√°neamente
        location /ws {
            proxy_pass http://localhost:5173;
            proxy_http_version 1.1;
            
            # Headers espec√≠ficos para upgrade HTTP ‚Üí WebSocket
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
        }

        # üè† CATCH-ALL FRONTEND - React Router y p√°ginas principales
        # REGLA FINAL: Todo lo que NO coincida con rules anteriores
        # Ejemplos que llegan aqu√≠:
        # - localhost:80/ (p√°gina principal)
        # - localhost:80/catalog (React Router)
        # - localhost:80/book/123 (React Router)
        # - localhost:80/search (React Router)
        location / {
            # Env√≠a todo al frontend React/Vite
            proxy_pass http://localhost:5173;
            proxy_http_version 1.1;
            
            # Headers para SPA (Single Page Application)
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            
            # No cache para desarrollo
            proxy_cache_bypass $http_upgrade;
        }
    }
}

# üìä ORDEN DE EVALUACI√ìN DE LOCATIONS:
# nginx eval√∫a locations en este orden de prioridad:
# 1. location /api/          ‚Üê M√ÅS ESPEC√çFICO (exact match)
# 2. location /@vite/        ‚Üê M√ÅS ESPEC√çFICO (exact match)  
# 3. location /src/          ‚Üê M√ÅS ESPEC√çFICO (exact match)
# 4. location ~* \.(js|css)  ‚Üê REGEX (expresiones regulares)
# 5. location /ws            ‚Üê ESPEC√çFICO (exact match)
# 6. location /              ‚Üê CATCH-ALL (√∫ltimo, menos espec√≠fico)

# üéØ FLUJO DE EJEMPLO:
# Usuario ‚Üí localhost:80/api/books
#   ‚Üì nginx eval√∫a
#   ‚Üì ¬øEmpieza con /api/? ‚Üí S√ç
#   ‚Üì proxy_pass ‚Üí localhost:5000/api/books
#   ‚Üì Node.js consulta MongoDB
#   ‚Üì Respuesta: JSON con 29 libros
#   ‚Üì nginx retorna a usuario

# üöÄ BENEFICIOS DE ESTA CONFIGURACI√ìN:
# ‚úÖ Un solo puerto (80) para todo
# ‚úÖ Hot Module Replacement funciona
# ‚úÖ APIs sin problemas CORS
# ‚úÖ Cache optimizado para performance
# ‚úÖ 8,000+ usuarios simult√°neos
# ‚úÖ Compresi√≥n autom√°tica (70% menos datos)
# ‚úÖ Logs completos para debugging
# ‚úÖ Arquitectura de nivel enterprise 